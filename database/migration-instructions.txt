
=== TRACK & FIELD DATABASE SETUP INSTRUCTIONS ===

Since direct SQL execution is not available, follow these steps to set up your database:

1. Log in to your Supabase project dashboard: undefined
2. Navigate to SQL Editor
3. Create a new query
4. Copy and paste the following SQL scripts in this order:

STEP 1: Run migrations.sql to create tables and relationships
--------------------------------------------------------
Open Supabase SQL Editor and create a new query with this content:

--- START OF migrations.sql ---
-- Database Migration SQL for Track & Field Application
-- This file contains all SQL commands needed to set up the database schema

-- Enable UUID extension if not already enabled
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Create Profiles Table (Core User Data)
CREATE TABLE IF NOT EXISTS public.profiles (
  id UUID REFERENCES auth.users ON DELETE CASCADE PRIMARY KEY,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
  email TEXT UNIQUE,
  first_name TEXT,
  last_name TEXT,
  phone TEXT,
  role TEXT CHECK (role IN ('athlete', 'coach', 'team_manager')),
  avatar_url TEXT,
  bio TEXT
);

-- Create Teams Table
CREATE TABLE IF NOT EXISTS public.teams (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  name TEXT NOT NULL,
  description TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL
);

-- Create Athletes Table (Athlete-specific Data)
CREATE TABLE IF NOT EXISTS public.athletes (
  id UUID REFERENCES public.profiles(id) ON DELETE CASCADE PRIMARY KEY,
  birth_date DATE,
  gender TEXT CHECK (gender IN ('male', 'female', 'other')),
  events TEXT[],
  team_id UUID REFERENCES public.teams(id) ON DELETE SET NULL
);

-- Create Coaches Table (Coach-specific Data)
CREATE TABLE IF NOT EXISTS public.coaches (
  id UUID REFERENCES public.profiles(id) ON DELETE CASCADE PRIMARY KEY,
  specialties TEXT[],
  certifications TEXT[]
);

-- Create Team Managers Table (Manager-specific Data)
CREATE TABLE IF NOT EXISTS public.team_managers (
  id UUID REFERENCES public.profiles(id) ON DELETE CASCADE PRIMARY KEY,
  organization TEXT
);

-- Create Coach-Athlete Relationship Table
CREATE TABLE IF NOT EXISTS public.coach_athletes (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  coach_id UUID REFERENCES public.coaches(id) ON DELETE CASCADE,
  athlete_id UUID REFERENCES public.athletes(id) ON DELETE CASCADE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
  UNIQUE(coach_id, athlete_id)
);

-- Create Workouts Table
CREATE TABLE IF NOT EXISTS public.workouts (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  name TEXT NOT NULL,
  description TEXT,
  created_by UUID REFERENCES public.profiles(id) ON DELETE SET NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL
);

-- Create Workout Assignments Table
CREATE TABLE IF NOT EXISTS public.workout_assignments (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  workout_id UUID REFERENCES public.workouts(id) ON DELETE CASCADE,
  athlete_id UUID REFERENCES public.athletes(id) ON DELETE CASCADE,
  assigned_by UUID REFERENCES public.profiles(id) ON DELETE SET NULL,
  assigned_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
  due_date DATE,
  status TEXT CHECK (status IN ('assigned', 'in_progress', 'completed', 'skipped')),
  UNIQUE(workout_id, athlete_id)
);

-- Create Events Table (Track & Field Events)
CREATE TABLE IF NOT EXISTS public.events (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  name TEXT UNIQUE NOT NULL,
  category TEXT CHECK (category IN ('sprint', 'middle_distance', 'long_distance', 'hurdles', 'relay', 'jump', 'throw', 'combined'))
);

-- Create Personal Records Table
CREATE TABLE IF NOT EXISTS public.personal_records (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  athlete_id UUID REFERENCES public.athletes(id) ON DELETE CASCADE,
  event_id UUID REFERENCES public.events(id) ON DELETE CASCADE,
  record_value NUMERIC NOT NULL, -- Time in seconds or distance in meters
  record_date DATE NOT NULL,
  location TEXT,
  notes TEXT,
  UNIQUE(athlete_id, event_id, record_date)
);

-- Setup RLS (Row Level Security) Policies

-- Profiles RLS
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;

-- Allow users to read all profiles
CREATE POLICY "Public profiles are viewable by everyone"
  ON public.profiles FOR SELECT
  USING (true);

-- Allow users to update only their own profile
CREATE POLICY "Users can update their own profile"
  ON public.profiles FOR UPDATE
  USING (auth.uid() = id);

-- Insert policy for profiles
CREATE POLICY "Users can insert their own profile"
  ON public.profiles FOR INSERT
  WITH CHECK (auth.uid() = id);

-- Athletes RLS
ALTER TABLE public.athletes ENABLE ROW LEVEL SECURITY;

-- Allow users to read all athletes
CREATE POLICY "Athletes are viewable by everyone"
  ON public.athletes FOR SELECT
  USING (true);

-- Allow users to update only their own athlete profile
CREATE POLICY "Users can update their own athlete profile"
  ON public.athletes FOR UPDATE
  USING (id IN (
    SELECT id FROM public.profiles 
    WHERE id = auth.uid() AND role = 'athlete'
  ));

-- Insert policy for athletes
CREATE POLICY "Users can insert their own athlete profile"
  ON public.athletes FOR INSERT
  WITH CHECK (id IN (
    SELECT id FROM public.profiles 
    WHERE id = auth.uid() AND role = 'athlete'
  ));

-- Coaches RLS
ALTER TABLE public.coaches ENABLE ROW LEVEL SECURITY;

-- Allow users to read all coaches
CREATE POLICY "Coaches are viewable by everyone"
  ON public.coaches FOR SELECT
  USING (true);

-- Allow users to update only their own coach profile
CREATE POLICY "Users can update their own coach profile"
  ON public.coaches FOR UPDATE
  USING (id IN (
    SELECT id FROM public.profiles 
    WHERE id = auth.uid() AND role = 'coach'
  ));

-- Create function for triggers
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql; 
--- END OF migrations.sql ---

STEP 2: Run views.sql to create database views
--------------------------------------------------------
Open a new query in SQL Editor and create a new query with this content:

--- START OF views.sql ---
-- Database Views for Track & Field Application
-- These views make it easier to query data from the application

-- Athletes View - Combines profile and athlete data
CREATE OR REPLACE VIEW public.athletes_view AS
SELECT
  p.id,
  p.email,
  p.first_name,
  p.last_name,
  p.first_name || ' ' || p.last_name AS full_name,
  p.phone,
  p.avatar_url,
  p.bio,
  a.birth_date,
  a.gender,
  a.events,
  a.team_id,
  t.name AS team_name,
  EXTRACT(YEAR FROM AGE(NOW(), a.birth_date)) AS age
FROM
  public.profiles p
JOIN
  public.athletes a ON p.id = a.id
LEFT JOIN
  public.teams t ON a.team_id = t.id
WHERE
  p.role = 'athlete';

-- Coaches View - Combines profile and coach data
CREATE OR REPLACE VIEW public.coaches_view AS
SELECT
  p.id,
  p.email,
  p.first_name,
  p.last_name,
  p.first_name || ' ' || p.last_name AS full_name,
  p.phone,
  p.avatar_url,
  p.bio,
  c.specialties,
  c.certifications
FROM
  public.profiles p
JOIN
  public.coaches c ON p.id = c.id
WHERE
  p.role = 'coach';

-- Team Managers View - Combines profile and manager data
CREATE OR REPLACE VIEW public.team_managers_view AS
SELECT
  p.id,
  p.email,
  p.first_name,
  p.last_name,
  p.first_name || ' ' || p.last_name AS full_name,
  p.phone,
  p.avatar_url,
  p.bio,
  tm.organization
FROM
  public.profiles p
JOIN
  public.team_managers tm ON p.id = tm.id
WHERE
  p.role = 'team_manager';

-- Coaches with Athletes View - Shows coaches with their assigned athletes
CREATE OR REPLACE VIEW public.coach_athletes_view AS
SELECT
  c.id AS coach_id,
  c.full_name AS coach_name,
  c.email AS coach_email,
  c.specialties,
  ARRAY_AGG(a.id) AS athlete_ids,
  ARRAY_AGG(a.full_name) AS athlete_names,
  COUNT(a.id) AS athlete_count
FROM
  public.coaches_view c
LEFT JOIN
  public.coach_athletes ca ON c.id = ca.coach_id
LEFT JOIN
  public.athletes_view a ON ca.athlete_id = a.id
GROUP BY
  c.id, c.full_name, c.email, c.specialties;

-- Team with Athletes View - Shows teams with their member athletes
CREATE OR REPLACE VIEW public.team_athletes_view AS
SELECT
  t.id AS team_id,
  t.name AS team_name,
  t.description,
  ARRAY_AGG(a.id) AS athlete_ids,
  ARRAY_AGG(a.full_name) AS athlete_names,
  COUNT(a.id) AS athlete_count
FROM
  public.teams t
LEFT JOIN
  public.athletes a ON t.id = a.team_id
LEFT JOIN
  public.profiles p ON a.id = p.id
GROUP BY
  t.id, t.name, t.description;

-- Athletes with Personal Records View
CREATE OR REPLACE VIEW public.athlete_records_view AS
SELECT
  a.id,
  a.full_name,
  a.team_name,
  e.name AS event_name,
  e.category AS event_category,
  pr.record_value,
  pr.record_date,
  pr.location
FROM
  public.athletes_view a
JOIN
  public.personal_records pr ON a.id = pr.athlete_id
JOIN
  public.events e ON pr.event_id = e.id
ORDER BY
  a.full_name, e.name, pr.record_date DESC; 
--- END OF views.sql ---

STEP 3 (OPTIONAL): Run seed-data.sql to populate development data
--------------------------------------------------------
WARNING: Only run this in development environments.

Open a new query in SQL Editor and create a new query with this content:

--- START OF seed-data.sql ---
-- Seed data for Track & Field application
-- Run this after migrations.sql to populate tables with initial data

-- Insert common track and field events
INSERT INTO public.events (id, name, category)
VALUES
  (uuid_generate_v4(), '100m Sprint', 'sprint'),
  (uuid_generate_v4(), '200m Sprint', 'sprint'),
  (uuid_generate_v4(), '400m Sprint', 'sprint'),
  (uuid_generate_v4(), '800m', 'middle_distance'),
  (uuid_generate_v4(), '1500m', 'middle_distance'),
  (uuid_generate_v4(), 'Mile Run', 'middle_distance'),
  (uuid_generate_v4(), '3000m', 'long_distance'),
  (uuid_generate_v4(), '5000m', 'long_distance'),
  (uuid_generate_v4(), '10000m', 'long_distance'),
  (uuid_generate_v4(), 'Marathon', 'long_distance'),
  (uuid_generate_v4(), '100m Hurdles (Women)', 'hurdles'),
  (uuid_generate_v4(), '110m Hurdles (Men)', 'hurdles'),
  (uuid_generate_v4(), '400m Hurdles', 'hurdles'),
  (uuid_generate_v4(), '4x100m Relay', 'relay'),
  (uuid_generate_v4(), '4x400m Relay', 'relay'),
  (uuid_generate_v4(), 'High Jump', 'jump'),
  (uuid_generate_v4(), 'Long Jump', 'jump'),
  (uuid_generate_v4(), 'Triple Jump', 'jump'),
  (uuid_generate_v4(), 'Pole Vault', 'jump'),
  (uuid_generate_v4(), 'Shot Put', 'throw'),
  (uuid_generate_v4(), 'Discus Throw', 'throw'),
  (uuid_generate_v4(), 'Javelin Throw', 'throw'),
  (uuid_generate_v4(), 'Hammer Throw', 'throw'),
  (uuid_generate_v4(), 'Decathlon (Men)', 'combined'),
  (uuid_generate_v4(), 'Heptathlon (Women)', 'combined');

-- Create demo teams
INSERT INTO public.teams (id, name, description, created_at, updated_at)
VALUES
  (uuid_generate_v4(), 'Track Stars', 'Elite competitive track team', NOW(), NOW()),
  (uuid_generate_v4(), 'Sprint Squad', 'Specializing in sprint events', NOW(), NOW()),
  (uuid_generate_v4(), 'Distance Demons', 'Long distance running specialists', NOW(), NOW()),
  (uuid_generate_v4(), 'Jumping Giants', 'High performers in jumping events', NOW(), NOW()),
  (uuid_generate_v4(), 'Throwing Thunder', 'Power athletes focusing on throwing events', NOW(), NOW());

-- Store team IDs for later use with athletes
DO $$
DECLARE
  track_stars_id UUID;
  sprint_squad_id UUID;
  distance_demons_id UUID;
  jumping_giants_id UUID;
  throwing_thunder_id UUID;
BEGIN
  -- Get team IDs
  SELECT id INTO track_stars_id FROM public.teams WHERE name = 'Track Stars';
  SELECT id INTO sprint_squad_id FROM public.teams WHERE name = 'Sprint Squad';
  SELECT id INTO distance_demons_id FROM public.teams WHERE name = 'Distance Demons';
  SELECT id INTO jumping_giants_id FROM public.teams WHERE name = 'Jumping Giants';
  SELECT id INTO throwing_thunder_id FROM public.teams WHERE name = 'Throwing Thunder';

  -- Note: To create actual users with auth, you would need to use the Supabase API or UI
  -- For demo purposes, we'll create placeholders in the profiles table 
  -- In practice, you would first create users through auth.users
  
  -- Create demo profiles and role-specific entries (ONLY FOR DEMO/LOCAL DEVELOPMENT)
  -- Note: In production, users would be created through proper signup process
  
  -- For coaches
  INSERT INTO public.profiles (id, email, first_name, last_name, role, created_at, updated_at)
  VALUES
    (uuid_generate_v4(), 'coach.carter@example.com', 'Ken', 'Carter', 'coach', NOW(), NOW()),
    (uuid_generate_v4(), 'coach.johnson@example.com', 'Sarah', 'Johnson', 'coach', NOW(), NOW());
  
  -- For team managers
  INSERT INTO public.profiles (id, email, first_name, last_name, role, created_at, updated_at)
  VALUES
    (uuid_generate_v4(), 'manager.williams@example.com', 'Robert', 'Williams', 'team_manager', NOW(), NOW()),
    (uuid_generate_v4(), 'manager.brown@example.com', 'Emily', 'Brown', 'team_manager', NOW(), NOW());
  
  -- For athletes (Sprint Squad)
  INSERT INTO public.profiles (id, email, first_name, last_name, role, created_at, updated_at)
  VALUES
    (uuid_generate_v4(), 'john.smith@example.com', 'John', 'Smith', 'athlete', NOW(), NOW()),
    (uuid_generate_v4(), 'lisa.johnson@example.com', 'Lisa', 'Johnson', 'athlete', NOW(), NOW());
  
  -- For athletes (Distance Demons)
  INSERT INTO public.profiles (id, email, first_name, last_name, role, created_at, updated_at)
  VALUES
    (uuid_generate_v4(), 'james.wilson@example.com', 'James', 'Wilson', 'athlete', NOW(), NOW()),
    (uuid_generate_v4(), 'maria.garcia@example.com', 'Maria', 'Garcia', 'athlete', NOW(), NOW());
  
  -- For athletes (Jumping Giants)
  INSERT INTO public.profiles (id, email, first_name, last_name, role, created_at, updated_at)
  VALUES
    (uuid_generate_v4(), 'mike.taylor@example.com', 'Michael', 'Taylor', 'athlete', NOW(), NOW()),
    (uuid_generate_v4(), 'sophia.lee@example.com', 'Sophia', 'Lee', 'athlete', NOW(), NOW());
  
  -- For athletes (Throwing Thunder)
  INSERT INTO public.profiles (id, email, first_name, last_name, role, created_at, updated_at)
  VALUES
    (uuid_generate_v4(), 'david.miller@example.com', 'David', 'Miller', 'athlete', NOW(), NOW()),
    (uuid_generate_v4(), 'emma.davis@example.com', 'Emma', 'Davis', 'athlete', NOW(), NOW());

  -- Create coach entries
  INSERT INTO public.coaches (id, specialties, certifications)
  SELECT id, 
         ARRAY['Sprint', 'Hurdles']::TEXT[], 
         ARRAY['USATF Level 1', 'Sprint Specialist']::TEXT[]
  FROM public.profiles 
  WHERE email = 'coach.carter@example.com';
  
  INSERT INTO public.coaches (id, specialties, certifications)
  SELECT id, 
         ARRAY['Distance', 'Cross Country']::TEXT[], 
         ARRAY['USATF Level 2', 'Distance Coach']::TEXT[]
  FROM public.profiles 
  WHERE email = 'coach.johnson@example.com';
  
  -- Create team manager entries
  INSERT INTO public.team_managers (id, organization)
  SELECT id, 'City Athletics Association'
  FROM public.profiles 
  WHERE email = 'manager.williams@example.com';
  
  INSERT INTO public.team_managers (id, organization)
  SELECT id, 'University Track Club'
  FROM public.profiles 
  WHERE email = 'manager.brown@example.com';
  
  -- Create athlete entries for Sprint Squad members
  INSERT INTO public.athletes (id, birth_date, gender, events, team_id)
  SELECT id, '2000-05-15'::DATE, 'male', 
         ARRAY['100m Sprint', '200m Sprint']::TEXT[], 
         sprint_squad_id
  FROM public.profiles 
  WHERE email = 'john.smith@example.com';
  
  INSERT INTO public.athletes (id, birth_date, gender, events, team_id)
  SELECT id, '2002-08-22'::DATE, 'female', 
         ARRAY['100m Sprint', '400m Sprint']::TEXT[], 
         sprint_squad_id
  FROM public.profiles 
  WHERE email = 'lisa.johnson@example.com';
  
  -- Create athlete entries for Distance Demons members
  INSERT INTO public.athletes (id, birth_date, gender, events, team_id)
  SELECT id, '1998-11-03'::DATE, 'male', 
         ARRAY['5000m', '10000m']::TEXT[], 
         distance_demons_id
  FROM public.profiles 
  WHERE email = 'james.wilson@example.com';
  
  INSERT INTO public.athletes (id, birth_date, gender, events, team_id)
  SELECT id, '2001-04-17'::DATE, 'female', 
         ARRAY['1500m', 'Mile Run']::TEXT[], 
         distance_demons_id
  FROM public.profiles 
  WHERE email = 'maria.garcia@example.com';
  
  -- Create athlete entries for Jumping Giants members
  INSERT INTO public.athletes (id, birth_date, gender, events, team_id)
  SELECT id, '1999-07-12'::DATE, 'male', 
         ARRAY['Long Jump', 'Triple Jump']::TEXT[], 
         jumping_giants_id
  FROM public.profiles 
  WHERE email = 'mike.taylor@example.com';
  
  INSERT INTO public.athletes (id, birth_date, gender, events, team_id)
  SELECT id, '2003-02-28'::DATE, 'female', 
         ARRAY['High Jump', 'Long Jump']::TEXT[], 
         jumping_giants_id
  FROM public.profiles 
  WHERE email = 'sophia.lee@example.com';
  
  -- Create athlete entries for Throwing Thunder members
  INSERT INTO public.athletes (id, birth_date, gender, events, team_id)
  SELECT id, '1997-09-08'::DATE, 'male', 
         ARRAY['Shot Put', 'Discus Throw']::TEXT[], 
         throwing_thunder_id
  FROM public.profiles 
  WHERE email = 'david.miller@example.com';
  
  INSERT INTO public.athletes (id, birth_date, gender, events, team_id)
  SELECT id, '2000-12-10'::DATE, 'female', 
         ARRAY['Javelin Throw', 'Hammer Throw']::TEXT[], 
         throwing_thunder_id
  FROM public.profiles 
  WHERE email = 'emma.davis@example.com';

  -- Create coach-athlete relationships
  INSERT INTO public.coach_athletes (coach_id, athlete_id, created_at)
  SELECT 
    c.id, 
    a.id,
    NOW()
  FROM 
    public.profiles c,
    public.profiles a
  WHERE 
    c.email = 'coach.carter@example.com' AND
    a.email IN ('john.smith@example.com', 'lisa.johnson@example.com', 'mike.taylor@example.com');
    
  INSERT INTO public.coach_athletes (coach_id, athlete_id, created_at)
  SELECT 
    c.id, 
    a.id,
    NOW()
  FROM 
    public.profiles c,
    public.profiles a
  WHERE 
    c.email = 'coach.johnson@example.com' AND
    a.email IN ('james.wilson@example.com', 'maria.garcia@example.com', 'david.miller@example.com', 'emma.davis@example.com');
    
END $$; 
--- END OF seed-data.sql ---

=== VERIFICATION ===
After running the scripts, you should see these tables in your database:
- profiles: Core user data
- athletes: Athlete-specific data
- coaches: Coach-specific data
- team_managers: Team manager-specific data
- teams: Teams data
- coach_athletes: Coach-athlete relationships
- events: Track & field events
- personal_records: Athlete performance records

And these views:
- athletes_view: Combined athlete and profile data
- coaches_view: Combined coach and profile data
- team_managers_view: Combined team manager and profile data
- coach_athletes_view: Coaches with their assigned athletes
- team_athletes_view: Teams with their member athletes
- athlete_records_view: Athletes with their personal records

Need help? Refer to the documentation in README-DB-MIGRATION.md

=== ADDITIONAL HELP ===
To save these SQL commands to text files for easier copying, run:
node src/db/setup-instructions.js > migration-instructions.txt
