TABLE: profiles
  - id: UUID [PRIMARY KEY]
  - created_at: TIMESTAMP WITH TIME ZONE [DEFAULT NOW(), NOT NULL]
  - updated_at: TIMESTAMP WITH TIME ZONE [DEFAULT NOW(), NOT NULL]
  - email: TEXT [UNIQUE]
  - first_name: TEXT
  - last_name: TEXT
  - phone: TEXT
  - role: TEXT [CHECK (role IN ('athlete', 'coach', 'team_manager'))]
  - avatar_url: TEXT
  - bio: TEXT
PRIMARY KEY: id
RLS POLICIES:
  - Public profiles are viewable by everyone: SELECT USING (true)
  - Users can update their own profile: UPDATE USING (auth.uid() = id)
  - Users can insert their own profile: INSERT WITH CHECK (auth.uid() = id)

TABLE: teams
  - id: UUID [PRIMARY KEY, DEFAULT uuid_generate_v4()]
  - name: TEXT [NOT NULL]
  - description: TEXT
  - created_at: TIMESTAMP WITH TIME ZONE [DEFAULT NOW(), NOT NULL]
  - updated_at: TIMESTAMP WITH TIME ZONE [DEFAULT NOW(), NOT NULL]
PRIMARY KEY: id

TABLE: athletes
  - id: UUID [PRIMARY KEY, FOREIGN KEY -> profiles(id) ON DELETE CASCADE]
  - birth_date: DATE
  - gender: TEXT [CHECK (gender IN ('male', 'female', 'other'))]
  - events: TEXT[]
  - team_id: UUID [FOREIGN KEY -> teams(id) ON DELETE SET NULL]
PRIMARY KEY: id
FOREIGN KEYS:
  - id -> profiles(id) ON DELETE CASCADE
  - team_id -> teams(id) ON DELETE SET NULL
RLS POLICIES:
  - Athletes are viewable by everyone: SELECT USING (true)
  - Users can update their own athlete profile: UPDATE USING (id IN (SELECT id FROM public.profiles WHERE id = auth.uid() AND role = 'athlete'))
  - Users can insert their own athlete profile: INSERT WITH CHECK (id IN (SELECT id FROM public.profiles WHERE id = auth.uid() AND role = 'athlete'))

TABLE: coaches
  - id: UUID [PRIMARY KEY, FOREIGN KEY -> profiles(id) ON DELETE CASCADE]
  - specialties: TEXT[]
  - certifications: TEXT[]
PRIMARY KEY: id
FOREIGN KEYS:
  - id -> profiles(id) ON DELETE CASCADE
RLS POLICIES:
  - Coaches are viewable by everyone: SELECT USING (true)
  - Users can update their own coach profile: UPDATE USING (id IN (SELECT id FROM public.profiles WHERE id = auth.uid() AND role = 'coach'))

TABLE: team_managers
  - id: UUID [PRIMARY KEY, FOREIGN KEY -> profiles(id) ON DELETE CASCADE]
  - organization: TEXT
PRIMARY KEY: id
FOREIGN KEYS:
  - id -> profiles(id) ON DELETE CASCADE

TABLE: coach_athletes
  - id: UUID [PRIMARY KEY, DEFAULT uuid_generate_v4()]
  - coach_id: UUID [FOREIGN KEY -> coaches(id) ON DELETE CASCADE]
  - athlete_id: UUID [FOREIGN KEY -> athletes(id) ON DELETE CASCADE]
  - created_at: TIMESTAMP WITH TIME ZONE [DEFAULT NOW(), NOT NULL]
  - approval_status: TEXT [CHECK (approval_status IN ('pending', 'approved', 'declined')), DEFAULT 'pending']
  - requested_at: TIMESTAMP WITH TIME ZONE [DEFAULT NOW(), NOT NULL]
  - approved_at: TIMESTAMP WITH TIME ZONE
  - UNIQUE(coach_id, athlete_id)
PRIMARY KEY: id
FOREIGN KEYS:
  - coach_id -> coaches(id) ON DELETE CASCADE
  - athlete_id -> athletes(id) ON DELETE CASCADE

TABLE: workouts
  - id: UUID [PRIMARY KEY, DEFAULT uuid_generate_v4()]
  - name: TEXT [NOT NULL]
  - description: TEXT
  - user_id: UUID [FOREIGN KEY -> profiles(id) ON DELETE CASCADE]
  - type: TEXT [DEFAULT 'Custom']
  - date: TEXT
  - duration: TEXT
  - time: TEXT
  - notes: TEXT [DEFAULT '']
  - exercises: JSONB [DEFAULT '[]']
  - location: TEXT
  - created_at: TIMESTAMP WITH TIME ZONE [DEFAULT NOW(), NOT NULL]
  - updated_at: TIMESTAMP WITH TIME ZONE [DEFAULT NOW(), NOT NULL]
PRIMARY KEY: id
FOREIGN KEYS:
  - user_id -> profiles(id) ON DELETE CASCADE
RLS POLICIES:
  - Workouts are viewable by authenticated users: SELECT USING (auth.role() = 'authenticated')
  - Users can create their own workouts: INSERT WITH CHECK (auth.uid() = user_id OR auth.uid()::text = created_by::text)
  - Users can update their own workouts: UPDATE USING (auth.uid() = user_id OR auth.uid()::text = created_by::text)
  - Users can delete their own workouts: DELETE USING (auth.uid() = user_id OR auth.uid()::text = created_by::text)

TABLE: workout_assignments
  - id: UUID [PRIMARY KEY, DEFAULT uuid_generate_v4()]
  - workout_id: UUID [FOREIGN KEY -> workouts(id) ON DELETE CASCADE]
  - athlete_id: UUID [FOREIGN KEY -> athletes(id) ON DELETE CASCADE]
  - assigned_by: UUID [FOREIGN KEY -> profiles(id) ON DELETE SET NULL]
  - assigned_at: TIMESTAMP WITH TIME ZONE [DEFAULT NOW(), NOT NULL]
  - due_date: DATE
  - status: TEXT [CHECK (status IN ('assigned', 'in_progress', 'completed', 'skipped'))]
  - UNIQUE(workout_id, athlete_id)
PRIMARY KEY: id
FOREIGN KEYS:
  - workout_id -> workouts(id) ON DELETE CASCADE
  - athlete_id -> athletes(id) ON DELETE CASCADE
  - assigned_by -> profiles(id) ON DELETE SET NULL

TABLE: events
  - id: UUID [PRIMARY KEY, DEFAULT uuid_generate_v4()]
  - name: TEXT [UNIQUE, NOT NULL]
  - category: TEXT [CHECK (category IN ('sprint', 'middle_distance', 'long_distance', 'hurdles', 'relay', 'jump', 'throw', 'combined'))]
PRIMARY KEY: id

TABLE: personal_records
  - id: UUID [PRIMARY KEY, DEFAULT uuid_generate_v4()]
  - athlete_id: UUID [FOREIGN KEY -> athletes(id) ON DELETE CASCADE]
  - event_id: UUID [FOREIGN KEY -> events(id) ON DELETE CASCADE]
  - record_value: NUMERIC [NOT NULL]
  - record_date: DATE [NOT NULL]
  - location: TEXT
  - notes: TEXT
  - UNIQUE(athlete_id, event_id, record_date)
PRIMARY KEY: id
FOREIGN KEYS:
  - athlete_id -> athletes(id) ON DELETE CASCADE
  - event_id -> events(id) ON DELETE CASCADE

TABLE: athlete_workouts
  - id: UUID [PRIMARY KEY, DEFAULT gen_random_uuid()]
  - athlete_id: UUID [FOREIGN KEY -> athletes(id) ON DELETE CASCADE]
  - workout_id: UUID [FOREIGN KEY -> workouts(id) ON DELETE CASCADE]
  - assigned_at: TIMESTAMPTZ [DEFAULT now(), NOT NULL]
  - status: TEXT [DEFAULT 'assigned']
  - UNIQUE(athlete_id, workout_id)
PRIMARY KEY: id
FOREIGN KEYS:
  - athlete_id -> athletes(id) ON DELETE CASCADE
  - workout_id -> workouts(id) ON DELETE CASCADE

TABLE: athlete_wellness_surveys
  - id: UUID [PRIMARY KEY, DEFAULT uuid_generate_v4()]
  - athlete_id: UUID [FOREIGN KEY -> profiles(id) ON DELETE CASCADE, NOT NULL]
  - survey_date: DATE [NOT NULL]
  - fatigue_level: INTEGER [NOT NULL, CHECK (fatigue_level >= 1 AND fatigue_level <= 10)]
  - muscle_soreness: INTEGER [NOT NULL, CHECK (muscle_soreness >= 1 AND muscle_soreness <= 10)]
  - stress_level: INTEGER [NOT NULL, CHECK (stress_level >= 1 AND stress_level <= 10)]
  - motivation_level: INTEGER [NOT NULL, CHECK (motivation_level >= 1 AND motivation_level <= 10)]
  - overall_feeling: INTEGER [NOT NULL, CHECK (overall_feeling >= 1 AND overall_feeling <= 10)]
  - sleep_quality: INTEGER [CHECK (sleep_quality >= 1 AND sleep_quality <= 10)]
  - sleep_duration: NUMERIC(4,2) [CHECK (sleep_duration >= 0 AND sleep_duration <= 24)]
  - notes: TEXT
  - created_at: TIMESTAMPTZ [DEFAULT NOW()]
  - updated_at: TIMESTAMPTZ [DEFAULT NOW()]
  - UNIQUE(athlete_id, survey_date)
PRIMARY KEY: id
FOREIGN KEYS:
  - athlete_id -> profiles(id) ON DELETE CASCADE
RLS POLICIES:
  - Athletes can view their own wellness surveys: SELECT USING (auth.uid() = athlete_id)
  - Athletes can insert their own wellness surveys: INSERT WITH CHECK (auth.uid() = athlete_id)
  - Athletes can update their own wellness surveys: UPDATE USING (auth.uid() = athlete_id)
  - Coaches can view their athletes wellness surveys: SELECT USING (EXISTS coach-athlete approved relationship)

TABLE: track_meets
  - id: UUID [PRIMARY KEY, DEFAULT uuid_generate_v4()]
  - name: TEXT [NOT NULL]
  - meet_date: DATE [NOT NULL] -- Start date for both single and multi-day meets
  - end_date: DATE -- End date for multi-day meets (optional)
  - venue_type: TEXT [CHECK (venue_type IN ('Indoor', 'Outdoor'))] -- Indoor or Outdoor venue type
  - venue_name: TEXT -- Name of the stadium or venue
  - join_link: TEXT -- Optional registration or information link
  - description: TEXT -- Additional details and description about the meet
  - address: TEXT
  - city: TEXT
  - state: TEXT
  - zip: TEXT
  - website: TEXT
  - contact_name: TEXT
  - contact_email: TEXT
  - contact_phone: TEXT
  - coach_id: UUID [FOREIGN KEY -> coaches(id) ON DELETE SET NULL]
  - athlete_id: UUID [FOREIGN KEY -> athletes(id) ON DELETE SET NULL]
  - school: TEXT
  - meet_type: TEXT
  - sanctioning_body: TEXT
  - host_organization: TEXT
  - status: TEXT [DEFAULT 'Planned', CHECK (status IN ('Planned', 'Completed', 'Cancelled'))]
  - registration_deadline: DATE
  - entry_fee: NUMERIC(10,2)
  - arrival_date: DATE
  - departure_date: DATE
  - transportation_modes: TEXT[]
  - transportation_info: TEXT
  - lodging_type: TEXT
  - lodging_details: TEXT
  - created_at: TIMESTAMP WITH TIME ZONE [DEFAULT NOW(), NOT NULL]
  - updated_at: TIMESTAMP WITH TIME ZONE [DEFAULT NOW(), NOT NULL]
PRIMARY KEY: id
FOREIGN KEYS:
  - coach_id -> coaches(id) ON DELETE SET NULL
  - athlete_id -> athletes(id) ON DELETE SET NULL
INDEXES:
  - idx_track_meets_meet_date ON meet_date
  - idx_track_meets_end_date ON end_date
  - idx_track_meets_coach_id ON coach_id
  - idx_track_meets_athlete_id ON athlete_id
RLS POLICIES:
  - Track meets are viewable by everyone: SELECT USING (true)
  - Coaches can create meets: INSERT WITH CHECK (auth.uid() = coach_id)
  - Athletes can create meets: INSERT WITH CHECK (auth.uid() = athlete_id)
  - Creators can update their meets: UPDATE USING (auth.uid() = coach_id OR auth.uid() = athlete_id)
  - Creators can delete their meets: DELETE USING (auth.uid() = coach_id OR auth.uid() = athlete_id)

TABLE: meet_events
  - id: UUID [PRIMARY KEY, DEFAULT uuid_generate_v4()]
  - meet_id: UUID [FOREIGN KEY -> track_meets(id) ON DELETE CASCADE, NOT NULL]
  - event_id: UUID [FOREIGN KEY -> events(id) ON DELETE SET NULL]
  - event_name: TEXT [NOT NULL]
  - event_date: DATE -- Specific date for this event (useful for multi-day meets)
  - event_day: INTEGER -- Day number (1, 2, 3, etc.)
  - start_time: TIME -- Start time for the event
  - heat: INTEGER -- Heat number for the event
  - event_type: TEXT [CHECK (event_type IN ('Preliminary', 'Qualifier', 'Semifinal', 'Finals'))] -- Type of event
  - run_time: TEXT -- Actual run time result (to be filled post-event)
  - created_at: TIMESTAMP WITH TIME ZONE [DEFAULT NOW(), NOT NULL]
  - updated_at: TIMESTAMP WITH TIME ZONE [DEFAULT NOW(), NOT NULL]
PRIMARY KEY: id
FOREIGN KEYS:
  - meet_id -> track_meets(id) ON DELETE CASCADE
  - event_id -> events(id) ON DELETE SET NULL
INDEXES:
  - idx_meet_events_meet_id ON meet_id
  - idx_meet_events_event_date ON event_date
  - idx_meet_events_heat ON heat
  - idx_meet_events_event_type ON event_type
RLS POLICIES:
  - Meet events are viewable by everyone: SELECT USING (true)
  - Meet creators can manage events: INSERT, UPDATE, DELETE based on meet ownership

TABLE: athlete_meet_events
  - id: UUID [PRIMARY KEY, DEFAULT uuid_generate_v4()]
  - athlete_id: UUID [FOREIGN KEY -> athletes(id) ON DELETE CASCADE, NOT NULL]
  - meet_event_id: UUID [FOREIGN KEY -> meet_events(id) ON DELETE CASCADE, NOT NULL]
  - assigned_by: UUID [FOREIGN KEY -> profiles(id) ON DELETE SET NULL] -- Coach who made the assignment
  - registered_at: TIMESTAMP WITH TIME ZONE [DEFAULT NOW(), NOT NULL]
  - status: TEXT [DEFAULT 'registered', CHECK (status IN ('registered', 'withdrawn', 'completed'))]
  - result: TEXT -- Final result/time for the athlete in this event
  - place: INTEGER -- Finishing place in the event
  - notes: TEXT
  - UNIQUE(athlete_id, meet_event_id)
PRIMARY KEY: id
FOREIGN KEYS:
  - athlete_id -> athletes(id) ON DELETE CASCADE
  - meet_event_id -> meet_events(id) ON DELETE CASCADE
  - assigned_by -> profiles(id) ON DELETE SET NULL
RLS POLICIES:
  - Athletes can view their assignments: SELECT USING (auth.uid() = athlete_id)
  - Coaches can view assignments for their athletes: SELECT USING (EXISTS coach-athlete relationship)
  - Athletes and coaches can manage assignments: INSERT, UPDATE, DELETE based on ownership

-- Add more tables as needed following this format 